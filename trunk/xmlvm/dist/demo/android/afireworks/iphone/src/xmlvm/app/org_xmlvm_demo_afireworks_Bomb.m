#import "org_xmlvm_demo_afireworks_Spark.h"
#import "android_view_ViewGroup.h"
#import "org_xmlvm_demo_afireworks_AndroidFireworks_Environment.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "org_xmlvm_demo_afireworks_Bomb.h"


@implementation org_xmlvm_demo_afireworks_Bomb;

+ (void) initialize
{
    if (strcmp(class_getName(self), "org_xmlvm_demo_afireworks_Bomb") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE release];
    [super dealloc];
}

- (void) __init_org_xmlvm_demo_afireworks_Bomb___android_view_ViewGroup_org_xmlvm_demo_afireworks_AndroidFireworks_Environment :(android_view_ViewGroup*)n1 :(org_xmlvm_demo_afireworks_AndroidFireworks_Environment*)n2
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    XMLVMElem _r5;
    XMLVMElem _r6;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r4.o = self;
    _r5.o = n1;
    _r6.o = n2;
    _r3.i = 12;
    [((java_lang_Object*) _r4.o) __init_java_lang_Object__];
    _r1.o = [XMLVMArray createSingleDimensionWithType:0 andSize:_r3.i];
    [_r1.o retain];
    [((org_xmlvm_demo_afireworks_Bomb*) _r4.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE release];
    ((org_xmlvm_demo_afireworks_Bomb*) _r4.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE = _r1.o;
    _r0.i = 0;
    label10:;
    if (_r0.i >= _r3.i) goto label24;
    _r1.o = [[((org_xmlvm_demo_afireworks_Bomb*) _r4.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE retain] autorelease];
    _r2.o = [[[org_xmlvm_demo_afireworks_Spark alloc] init] autorelease];
    [((org_xmlvm_demo_afireworks_Spark*) _r2.o) __init_org_xmlvm_demo_afireworks_Spark___android_view_ViewGroup_org_xmlvm_demo_afireworks_AndroidFireworks_Environment:_r5.o:_r6.o];
    [_r2.o retain];
    [((XMLVMArray*) _r1.o)->array.o[_r0.i] release];
    ((XMLVMArray*) _r1.o)->array.o[_r0.i] = _r2.o;
    _r0.i = _r0.i + 1;
    goto label10;
    label24:;
    [_pool release];
    return;
}


- (org_xmlvm_demo_afireworks_Spark*) getSpark___int :(int)n1
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r2.i = n1;
    _r0.o = [[((org_xmlvm_demo_afireworks_Bomb*) _r1.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE retain] autorelease];
    _r0.o = ((XMLVMArray*) _r0.o)->array.o[_r2.i];
    [[_r0.o retain] autorelease];
    [_r0.o retain];
    [_pool release];
    return _r0.o;
}


- (void) reset___int_int :(int)n1 :(int)n2
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r2.o = self;
    _r3.i = n1;
    _r4.i = n2;
    _r0.i = 0;
    label1:;
    _r1.i = 12;
    if (_r0.i >= _r1.i) goto label15;
    _r1.o = [[((org_xmlvm_demo_afireworks_Bomb*) _r2.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE retain] autorelease];
    _r1.o = ((XMLVMArray*) _r1.o)->array.o[_r0.i];
    [[_r1.o retain] autorelease];
    [((org_xmlvm_demo_afireworks_Spark*) _r1.o) reset___int_int:_r3.i:_r4.i];
    _r0.i = _r0.i + 1;
    goto label1;
    label15:;
    [_pool release];
    return;
}


- (int) allOutOfSight__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r4.o = self;
    _r3.i = 12;
    _r0.i = 0;
    _r1.i = 0;
    label4:;
    if (_r1.i >= _r3.i) goto label21;
    _r2.o = [[((org_xmlvm_demo_afireworks_Bomb*) _r4.o)->sparks_org_xmlvm_demo_afireworks_Spark_ARRAYTYPE retain] autorelease];
    _r2.o = ((XMLVMArray*) _r2.o)->array.o[_r1.i];
    [[_r2.o retain] autorelease];
    _r2.i = [((org_xmlvm_demo_afireworks_Spark*) _r2.o) isOutOfSight__];
    if (_r2.i == 0) goto label18;
    _r0.i = _r0.i + 1;
    label18:;
    _r1.i = _r1.i + 1;
    goto label4;
    label21:;
    if (_r0.i != _r3.i) goto label25;
    _r2.i = 1;
    label24:;
    [_pool release];
    return _r2.i;
    label25:;
    _r2.i = 0;
    goto label24;
}



@end

