#import "java_lang_String.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "android_hardware_Sensor.h"

int _STATIC_android_hardware_Sensor_TYPE_ACCELEROMETER = 1;
int _STATIC_android_hardware_Sensor_TYPE_MAGNETIC_FIELD = 2;
int _STATIC_android_hardware_Sensor_TYPE_ORIENTATION = 3;
int _STATIC_android_hardware_Sensor_TYPE_GYROSCOPE = 4;
int _STATIC_android_hardware_Sensor_TYPE_LIGHT = 5;
int _STATIC_android_hardware_Sensor_TYPE_PRESSURE = 6;
int _STATIC_android_hardware_Sensor_TYPE_TEMPERATURE = 7;
int _STATIC_android_hardware_Sensor_TYPE_PROXIMITY = 8;
int _STATIC_android_hardware_Sensor_TYPE_ALL = -1;

@implementation android_hardware_Sensor;

+ (void) initialize
{
    if (strcmp(class_getName(self), "android_hardware_Sensor") == 0) {
    }
}

- (id) init
{
    if (self = [super init]) {
        mName_java_lang_String = (id) [NSNull null];
        mVendor_java_lang_String = (id) [NSNull null];
    }
    return self;
}

- (void) dealloc
{
    [mName_java_lang_String release];
    [mVendor_java_lang_String release];
    [super dealloc];
}

+ (int) _GET_TYPE_ACCELEROMETER
{
    return _STATIC_android_hardware_Sensor_TYPE_ACCELEROMETER;
}

+ (void) _PUT_TYPE_ACCELEROMETER: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_ACCELEROMETER = v;
}

+ (int) _GET_TYPE_MAGNETIC_FIELD
{
    return _STATIC_android_hardware_Sensor_TYPE_MAGNETIC_FIELD;
}

+ (void) _PUT_TYPE_MAGNETIC_FIELD: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_MAGNETIC_FIELD = v;
}

+ (int) _GET_TYPE_ORIENTATION
{
    return _STATIC_android_hardware_Sensor_TYPE_ORIENTATION;
}

+ (void) _PUT_TYPE_ORIENTATION: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_ORIENTATION = v;
}

+ (int) _GET_TYPE_GYROSCOPE
{
    return _STATIC_android_hardware_Sensor_TYPE_GYROSCOPE;
}

+ (void) _PUT_TYPE_GYROSCOPE: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_GYROSCOPE = v;
}

+ (int) _GET_TYPE_LIGHT
{
    return _STATIC_android_hardware_Sensor_TYPE_LIGHT;
}

+ (void) _PUT_TYPE_LIGHT: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_LIGHT = v;
}

+ (int) _GET_TYPE_PRESSURE
{
    return _STATIC_android_hardware_Sensor_TYPE_PRESSURE;
}

+ (void) _PUT_TYPE_PRESSURE: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_PRESSURE = v;
}

+ (int) _GET_TYPE_TEMPERATURE
{
    return _STATIC_android_hardware_Sensor_TYPE_TEMPERATURE;
}

+ (void) _PUT_TYPE_TEMPERATURE: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_TEMPERATURE = v;
}

+ (int) _GET_TYPE_PROXIMITY
{
    return _STATIC_android_hardware_Sensor_TYPE_PROXIMITY;
}

+ (void) _PUT_TYPE_PROXIMITY: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_PROXIMITY = v;
}

+ (int) _GET_TYPE_ALL
{
    return _STATIC_android_hardware_Sensor_TYPE_ALL;
}

+ (void) _PUT_TYPE_ALL: (int) v
{
    _STATIC_android_hardware_Sensor_TYPE_ALL = v;
}

- (void) __init_android_hardware_Sensor__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r0.o = self;
    [((java_lang_Object*) _r0.o) __init_java_lang_Object__];
    [_pool release];
    return;
}


- (void) __init_android_hardware_Sensor___int :(int)n1
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r0.o = self;
    _r1.i = n1;
    [((java_lang_Object*) _r0.o) __init_java_lang_Object__];
    ((android_hardware_Sensor*) _r0.o)->mType_int = _r1.i;
    [_pool release];
    return;
}


- (java_lang_String*) getName__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.o = [[((android_hardware_Sensor*) _r1.o)->mName_java_lang_String retain] autorelease];
    [_r0.o retain];
    [_pool release];
    return _r0.o;
}


- (java_lang_String*) getVendor__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.o = [[((android_hardware_Sensor*) _r1.o)->mVendor_java_lang_String retain] autorelease];
    [_r0.o retain];
    [_pool release];
    return _r0.o;
}


- (int) getType__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.i = ((android_hardware_Sensor*) _r1.o)->mType_int;
    [_pool release];
    return _r0.i;
}


- (int) getVersion__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.i = ((android_hardware_Sensor*) _r1.o)->mVersion_int;
    [_pool release];
    return _r0.i;
}


- (float) getMaximumRange__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.f = ((android_hardware_Sensor*) _r1.o)->mMaxRange_float;
    [_pool release];
    return _r0.f;
}


- (float) getResolution__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.f = ((android_hardware_Sensor*) _r1.o)->mResolution_float;
    [_pool release];
    return _r0.f;
}


- (float) getPower__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.f = ((android_hardware_Sensor*) _r1.o)->mPower_float;
    [_pool release];
    return _r0.f;
}


- (int) getHandle__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.i = ((android_hardware_Sensor*) _r1.o)->mHandle_int;
    [_pool release];
    return _r0.i;
}


- (void) setRange___float_float :(float)n1 :(float)n2
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r0.o = self;
    _r1.f = n1;
    _r2.f = n2;
    ((android_hardware_Sensor*) _r0.o)->mMaxRange_float = _r1.f;
    ((android_hardware_Sensor*) _r0.o)->mResolution_float = _r2.f;
    [_pool release];
    return;
}


- (void) setLegacyType___int :(int)n1
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r0.o = self;
    _r1.i = n1;
    ((android_hardware_Sensor*) _r0.o)->mLegacyType_int = _r1.i;
    [_pool release];
    return;
}


- (int) getLegacyType__
{
    id        _res;
    id        _ex;
    XMLVMElem _r0;
    XMLVMElem _r1;
    NSAutoreleasePool* _pool = [[NSAutoreleasePool alloc] init];
    _r1.o = self;
    _r0.i = ((android_hardware_Sensor*) _r1.o)->mLegacyType_int;
    [_pool release];
    return _r0.i;
}



@end

